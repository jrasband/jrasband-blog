<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Emacs on Joshua Rasband&#39;s website</title>
    <link>http://localhost:1313/tags/emacs/</link>
    <description>Recent content in Emacs on Joshua Rasband&#39;s website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>contact@jrasband.com (Joshua Rasband)</managingEditor>
    <webMaster>contact@jrasband.com (Joshua Rasband)</webMaster>
    <copyright>Joshua Rasband (CC BY 4.0)</copyright>
    <lastBuildDate>Thu, 10 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An overview of my Emacs journey</title>
      <link>http://localhost:1313/posts/2024-10-10-an-overview-of-my-emacs-journey/</link>
      <pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate><author>contact@jrasband.com (Joshua Rasband)</author>
      <guid>http://localhost:1313/posts/2024-10-10-an-overview-of-my-emacs-journey/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ll probably write more about the ways that Emacs (and Org mode) has improved&#xA;my life, but here&amp;rsquo;s a brief summary.&lt;/p&gt;&#xA;&lt;p&gt;I started using Emacs during college after getting introduced to Org mode by my&#xA;research mentor. I&amp;rsquo;d just gotten burned by two of my preferred software tools&#xA;getting shut down&amp;mdash;one was a text editor, and the other was a productivity&#xA;manager, so I was about as receptive as one could be to the idea of open-source&#xA;text editors and productivity managers.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I&rsquo;ll probably write more about the ways that Emacs (and Org mode) has improved
my life, but here&rsquo;s a brief summary.</p>
<p>I started using Emacs during college after getting introduced to Org mode by my
research mentor. I&rsquo;d just gotten burned by two of my preferred software tools
getting shut down&mdash;one was a text editor, and the other was a productivity
manager, so I was about as receptive as one could be to the idea of open-source
text editors and productivity managers.</p>
<p>Over the next few years, Emacs became an integral part of my writing,
note-taking, and programming workflows. Part of what I enjoyed about Emacs was
how it challenged me to learn more and to become more. Emacs didn&rsquo;t hold my
hand&mdash;it demanded that I learn how to program.</p>
<p>Another key component was the community. Without the abundance of blogs and
forums and YouTube tutorials guiding me at each step of my Emacs path, I
probably would have given up early on. The thing that I loved the most about the
Emacs (and computer science community in general) is that they seemed to be the
kind of people I wanted to be around. They were curious, hard-working, and
clever. They had interesting ideas and interesting taste.</p>
<p>Now, I&rsquo;m a committed Emacs user. It&rsquo;s not for everyone, but I love how it&rsquo;s
helped me grow, I love the ideas and communities it&rsquo;s helped me discover, and I
love the sense of ownership and independence that open source brings me.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Improved org-capture on MacOS</title>
      <link>http://localhost:1313/posts/2024-10-09-improved-org-capture-on-macos/</link>
      <pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate><author>contact@jrasband.com (Joshua Rasband)</author>
      <guid>http://localhost:1313/posts/2024-10-09-improved-org-capture-on-macos/</guid>
      <description>&lt;p&gt;I read &lt;a href=&#34;https://macowners.club/posts/org-capture-from-everywhere-macos/&#34;&gt;this post&lt;/a&gt; and it got me excited about using &lt;code&gt;emacsclient&lt;/code&gt; to capture from&#xA;anywhere on MacOS. I was particular about getting the capture frame to show only&#xA;capture-related buffers, so I needed to make some modifications to the original&#xA;code based on comments on &lt;a href=&#34;https://emacs.stackexchange.com/questions/46460/org-capture-frame-with-no-splits&#34;&gt;this stackoverflow question&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s my solution:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;(defun my/make-org-capture-frame ()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;Create a new frame and run `org-capture&amp;#39;.&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  (interactive)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  (make-frame &amp;#39;((name . &amp;#34;capture&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                (top . 300)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                (left . 700)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                (width . 80)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                (height . 25)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  (select-frame-by-name &amp;#34;capture&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  (delete-other-windows)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  (cl-letf (((symbol-function &amp;#39;switch-to-buffer-other-window) #&amp;#39;switch-to-buffer) ((symbol-function &amp;#39;org-display-buffer-split) #&amp;#39;org-display-buffer-full-frame)) (org-capture)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;(defun my/org-capture-delete-frame (orig-fun &amp;amp;rest args)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  (if (equal &amp;#34;capture&amp;#34; (frame-parameter nil &amp;#39;name))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;      (delete-frame))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;  (apply orig-fun args))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;(advice-add &amp;#39;user-error :around #&amp;#39;my/org-capture-delete-frame)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;(advice-add &amp;#39;org-capture-finalize :around #&amp;#39;my/org-capture-delete-frame)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can call &lt;code&gt;emacsclient -nw --eval &amp;quot;(my/make-org-capture-frame)&amp;quot;&lt;/code&gt; and it&#xA;will open a capture buffer in a new frame.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I read <a href="https://macowners.club/posts/org-capture-from-everywhere-macos/">this post</a> and it got me excited about using <code>emacsclient</code> to capture from
anywhere on MacOS. I was particular about getting the capture frame to show only
capture-related buffers, so I needed to make some modifications to the original
code based on comments on <a href="https://emacs.stackexchange.com/questions/46460/org-capture-frame-with-no-splits">this stackoverflow question</a>.</p>
<p>Here&rsquo;s my solution:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">(defun my/make-org-capture-frame ()
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  &#34;Create a new frame and run `org-capture&#39;.&#34;
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  (interactive)
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  (make-frame &#39;((name . &#34;capture&#34;)
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">                (top . 300)
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">                (left . 700)
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">                (width . 80)
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">                (height . 25)))
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  (select-frame-by-name &#34;capture&#34;)
</span></span><span class="line"><span class="ln">10</span><span class="cl">  (delete-other-windows)
</span></span><span class="line"><span class="ln">11</span><span class="cl">  (cl-letf (((symbol-function &#39;switch-to-buffer-other-window) #&#39;switch-to-buffer) ((symbol-function &#39;org-display-buffer-split) #&#39;org-display-buffer-full-frame)) (org-capture)))
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">(defun my/org-capture-delete-frame (orig-fun &amp;rest args)
</span></span><span class="line"><span class="ln">14</span><span class="cl">  (if (equal &#34;capture&#34; (frame-parameter nil &#39;name))
</span></span><span class="line"><span class="ln">15</span><span class="cl">      (delete-frame))
</span></span><span class="line"><span class="ln">16</span><span class="cl">  (apply orig-fun args))
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">(advice-add &#39;user-error :around #&#39;my/org-capture-delete-frame)
</span></span><span class="line"><span class="ln">19</span><span class="cl">(advice-add &#39;org-capture-finalize :around #&#39;my/org-capture-delete-frame)</span></span></code></pre></div><p>Now you can call <code>emacsclient -nw --eval &quot;(my/make-org-capture-frame)&quot;</code> and it
will open a capture buffer in a new frame.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
